note
	description: "EiffelVision Widget MAIN_WINDOW.%
		%The original version of this class was generated by EiffelBuild."
	generator: "EiffelBuild"
	date: "$Date: 2010-12-22 10:39:24 -0800 (Wed, 22 Dec 2010) $"
	revision: "$Revision: 85202 $"

class
	MAIN_WINDOW

inherit
	MAIN_WINDOW_IMP


feature {NONE} -- Initialization

	user_create_interface_objects
			-- Create any auxilliary objects needed for MAIN_WINDOW.
			-- Initialization for these objects must be performed in `user_initialization'.
		do
				-- Create attached types defined in class here, initialize them in `user_initialization'.
				create timer.make_with_interval(10)
				create player
				player.add_folder("D:\Musique Test")
				timer.actions.extend(agent player.update)
		end

	user_initialization
			-- Perform any initialization on objects created by `user_create_interface_objects'
			-- and from within current class itself.
		do
				-- Initialize types defined in current class
				open_button.set_pixmap ((create {OPEN_PIXEL_BUFFER}.make).to_pixmap)
				play_button.set_pixmap ((create {PLAY_PIXEL_BUFFER}.make).to_pixmap)
				next_button.set_pixmap ((create {NEXT_PIXEL_BUFFER}.make).to_pixmap)
				previous_button.set_pixmap ((create {PREVIOUS_PIXEL_BUFFER}.make).to_pixmap)
				pause_button.set_pixmap ((create {PAUSE_PIXEL_BUFFER}.make).to_pixmap)
				shuffle_button.set_pixmap ((create {SHUFFLE_PIXEL_BUFFER}.make).to_pixmap)
				volume_range.set_value(15)
				player.song_changes_actions.extend(agent update_song_name)
		end

feature {NONE} -- Implementation


	progress_range_change_actions (a_value: INTEGER)
			-- Called by `change_actions' of `progress_range'.
		do
		end


	open_button_select_actions
			-- Called by `select_actions' of `open_button'.
		do
		end


	previous_button_select_actions
			-- Called by `select_actions' of `previous_button'.
		do
			player.previous
		end


	play_button_select_actions
			-- Called by `select_actions' of `play_button'.
		do
			player.play
		end


	pause_button_select_actions
			-- Called by `select_actions' of `pause_button'.
		do
			player.pause
		end


	next_button_select_actions
			-- Called by `select_actions' of `next_button'.
		do
			player.next
		end


	volume_range_change_actions (a_value: INTEGER)
			-- Called by `change_actions' of `volume_range'.
		local
			l_value: REAL_64
			l_player_value: REAL_64
		do
			l_value := a_value.quotient(volume_range.value_range.upper)
			l_player_value := (2.0 ^ l_value) - 1
			player.set_gain(l_player_value.truncated_to_real)
		end

	shuffle_button_select_actions
			-- Called by `select_actions` of shuffle_button.
		do
			player.toggle_random
		end

	update_song_name(a_file: READABLE_STRING_GENERAL)
			-- Called by `song_changes_actions' of `player'.
		local
			l_path: PATH
		do
			create l_path.make_from_string(a_file)
			title_label.set_text(l_path.out)
		end

	player: PLAYER
			-- The sound manager and playlist holder

feature {NONE} -- Implementation

	timer: EV_TIMEOUT
			-- Calls `on_update' regularly

end
